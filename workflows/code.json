{
    "ExampleWorkflow": "package org.creativecodingmap.workflows\n\nimport org.creativecodingmap.core.*\n\nfun exampleWorkflow() =\n    workflow {\n        var artifact = useTool(Processing()) {\n            importLibrary(\"hemesh\")\n            importLibrary(\"controlP5\")\n            runSketch()\n            createImage(100, 100)\n            drawRectangle(100.0, 100.0, 100.0, 100.0)\n\n            drawLoop {\n                clearBackground(1, 2.0, 1)\n\n                useLibrary(library = OrxFx()) {\n                    applyGaussianBlur(10, 10)\n                }\n\n                useLibrary(library = OrxNoise()) {\n                    for (i in 0 until 3) {\n                        generatePerlinNoise1D()\n                    }\n                }\n                saveImage(\"bla.jpg\")\n            }\n\n        }\n\n        var artifact2 = useTool(P5Js()) {\n            importLibrary(\"p5ascii\")\n            runSketch()\n            loadImageArtifact(artifact)\n            saveImage(\"bla2.jpg\")\n        }\n\n        deliver(artifact)\n        deliver(artifact2)\n    }\n",
    "ExampleWorkflow03": "package org.creativecodingmap.workflows\n\nimport org.creativecodingmap.core.*\n\nfun exampleWorkflow03() = workflow {\n    var artifact = useTool(OPENRNDR()) {\n        createImage(100, 100)\n        drawRectangle(100.0, 100.0, 100.0, 100.0)\n\n        drawLoop {\n            // Clear the background to green\n            clearBackground(0, 1, 0)\n\n            // Extract an iso contour\n            useLibrary(library = OrxMarchingSquares()) {\n                extractIsoContour()\n            }\n        }\n    }\n    deliver(artifact)\n}\n",
    "ExampleWorkflow02": "package org.creativecodingmap.workflows\n\nimport org.creativecodingmap.core.*\n\nfun exampleWorkflow02() = workflow {\n    var artifact = useTool(OPENRNDR()) {\n        createImage(100, 100)\n        drawRectangle(100.0, 100.0, 100.0, 100.0)\n\n        drawLoop {\n            // Clear the background to red\n            clearBackground(1, 0, 0)\n\n            // Use orx-noise to generate 2d noise\n            useLibrary(library = OrxNoise()) {\n                for (i in 0 until 3) {\n                    generatePerlinNoise2D()\n                }\n            }\n        }\n    }\n    deliver(artifact)\n}\n"
}